cmake_minimum_required(VERSION 2.8.3)
project(adma_connect)

## Compile as C++11, supported in ROS melodic and newer
add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED 
  COMPONENTS
    roscpp
    rospy
    std_msgs
    message_generation
    can_msgs
    geometry_msgs
  )

## System dependencies are found with CMake's conventions
find_package(Boost REQUIRED COMPONENTS system date_time)

set (LIB_DIR_LOCATION ${NAME}/lib) 
find_library(Can NAMES can PATHS ${LIB_DIR_LOCATION}) 
set(INCLUDE_DIRS ${NAME}/include)  

set (LIB_DIR_LOCATION ${NAME}/lib) 
find_library(Cantools NAMES cantools PATHS ${LIB_DIR_LOCATION}) 
set(INCLUDE_DIRS ${NAME}/include)  

set (LIB_DIR_LOCATION ${NAME}/lib) 
find_library(Rospy_message_converter NAMES rospy_message_converter PATHS ${LIB_DIR_LOCATION}) 
set(INCLUDE_DIRS ${NAME}/include)  

set (LIB_DIR_LOCATION ${NAME}/lib) 
find_library(Transforms3d NAMES transforms3d PATHS ${LIB_DIR_LOCATION}) 
set(INCLUDE_DIRS ${NAME}/include)

catkin_python_setup()
################################################
## Declare ROS messages, services and actions ##
################################################
## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   Adma.msg
   Adma_delta.msg
   ego_status.msg ##changed
 )
## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs
   can_msgs
   geometry_msgs
 )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  CATKIN_DEPENDS
  roscpp
  std_msgs
  DEPENDS 
  boost
  message_runtime
  can_msgs
  )

###########
## Build ##
###########
set(use_SYSTEM_BOOST TRUE)
## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  SYSTEM {Boost_INCLUDE_DIRS}
)

## Declare a cpp library
add_library(${PROJECT_NAME}_core
  include/adma_connect/adma_parse.h
  src/adma_parse.cpp
)

add_executable(${PROJECT_NAME} 
  src/adma_connect.cpp
  src/adma_can_connect
)


## Add dependencies to exported targets, like ROS msgs or srvs
add_dependencies(${PROJECT_NAME}_core
  ${catkin_EXPORTED_TARGETS}
)

add_dependencies(${PROJECT_NAME} ${PROJECT_NAME}_generate_messages_cpp)


add_dependencies(${PROJECT_NAME}
  ${catkin_EXPORTED_TARGETS}
)

## Specify libraries to link executable targets against
target_link_libraries(${PROJECT_NAME}_core
  ${catkin_LIBRARIES}
)

target_link_libraries(${PROJECT_NAME}
  ${PROJECT_NAME}_core
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}

)

#############
## Install ##
#############

# Mark executables and/or libraries for installation
install(
  TARGETS ${PROJECT_NAME}
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

# Mark cpp header files for installation
install(
  DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.hpp"
)

# Mark other files for installation
install(
  DIRECTORY doc
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)


#############
## Testing ##
#############

#if(CATKIN_ENABLE_TESTING)
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
## Add gtest based cpp test target and link libraries
#catkin_add_gtest(${PROJECT_NAME}-test
#  test/test_receive_utm_pub_gps.cpp
#  test/UTMTest.cpp)
#endif()

#if(TARGET ${PROJECT_NAME}-test)
#  target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME}_core)
#endif()
